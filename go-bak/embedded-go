#!/bin/sh
set -o nounset -o errexit

temp_dir=$(mktemp -d)

cleanup() {
  rm -rf "$temp_dir"
}

trap cleanup EXIT

if test "${1+SET}" = SET && test "$1" = "update-me"
then
  # shellcheck disable=SC2064
  curl --fail --location --output "$temp_dir"/2e1b35b https://raw.githubusercontent.com/knaka/src/go/embedded-go
  cat "$temp_dir"/2e1b35b > "$0"
  exit 0
fi

main_file_path="$temp_dir/main.go"
cat <<'EMBED_FAA58B3' > "$main_file_path"
package main

import (
  "os"
)

func main() {
  println("Hello, World!3")
  for i, arg := range os.Args {
    println(i, arg)
  }
}
EMBED_FAA58B3

is_windows() {
  case "$(uname -s)" in
    (Windows_NT|CYGWIN*|MINGW*|MSYS*) return 0 ;;
    (*) return 1 ;;
  esac
}

# shellcheck disable=SC2120
sort_version() {
  sed -E -e '/-/! { s/^([^.]+(\.[^.]+){2})$/\1_/; }' -e 's/-patch/_patch/' | sort -V "$@" | sed -e 's/_$//' -e 's/_patch/-patch/'
}

# Check if the version is greater than the specified version.
version_gt() {
  test "$(printf '%s\n' "$@" | sort_version | head -n 1)" != "$1"
}

version_ge() {
  test "$(printf '%s\n' "$@" | sort_version -r | head -n 1)" = "$1"
}

# All releases - The Go Programming Language https://go.dev/dl/
go_required_min_ver=go1.23.1

echo_go_paths() (
  # $GOROOT
  if test "${GOROOT+set}" = set
  then
    echo "$GOROOT"
  fi
  # `go` command
  if type go > /dev/null 2>&1
  then
    go env GOROOT
  fi
  # System-wide installation
  if is_windows
  then
    echo "C:/Program Files/Go"
  else
    echo "/usr/local/go"
  fi
  # Automatically installed SDKs
  find "$HOME"/sdk -maxdepth 1 -type d -name 'go*' | sort -r
)

# Returns the path to the Go root directory.
goroot_path() (
  goroot="$(
    export GOTOOLCHAIN=local
    echo_go_paths | while read -r go_dir_path
    do
      if type "$go_dir_path"/bin/go >/dev/null 2>&1 && version_ge "$("$go_dir_path"/bin/go env GOVERSION)" "$go_required_min_ver"
      then
        echo "$go_dir_path"
        break
      fi
    done
  )"
  if test -n "$goroot"
  then
    echo "$goroot"
    return 0
  fi

  # If no Go installation is found, install the required version.
  sdk_dir_path="$HOME"/sdk
  goroot="$sdk_dir_path"/${go_required_min_ver}
  case "$(uname -s)" in
    Linux) goos=linux;;
    Darwin) goos=darwin;;
    Windows_NT) goos=windows;;
    *)
      echo "Unsupported OS: $(uname -s)" >&2
      exit 1;;
  esac
  case "$(uname -m)" in
    arm64) goarch=arm64;;
    x86_64) goarch=amd64;;
    *)
      echo "Unsupported architecture: $(uname -m)" >&2
      exit 1;;
  esac
  mkdir -p "$sdk_dir_path"
  rm -fr "$sdk_dir_path"/go
  if is_windows
  then
    zip_path="$(temp_dir_path)"/temp.zip
    curl --location -o "$zip_path" "https://go.dev/dl/$go_required_min_ver.$goos-$goarch.zip"
    (
      cd "$sdk_dir_path" || exit 1
      unzip -q "$zip_path" >&2
    )
  else
    curl --location -o - "https://go.dev/dl/$go_required_min_ver.$goos-$goarch.tar.gz" | (cd "$sdk_dir_path" || exit 1; tar -xzf -)
  fi
  mv "$sdk_dir_path"/go "$goroot"
  echo "$goroot"
)

gopath="${GOPATH:-$HOME/go}"
mkdir -p "$gopath"/bin
unique_name=$(realpath "$0" | tr / _)
cmd_path="$gopath"/bin/embedded-"$unique_name"
if test -z "$(find "$cmd_path" -newer "$0" 2>/dev/null)"
then
  (
    GOROOT="$(goroot_path)"
    echo Compiling "$0" to "$cmd_path" with Go in "$GOROOT" >&2
    export GOROOT
    PATH="$GOROOT"/bin:$PATH
    export PATH 
    go build -o "$cmd_path" "$main_file_path"
  )
fi

cleanup

exec "$cmd_path" "$@"
