use std::fs::{File};
use std::io::Write;
use std::path::Path;
use glob::glob;

fn main() -> std::io::Result<()> {
    let dest_path = Path::new("src").join("subcmds.rs");
    let mut writer = File::create(&dest_path)?;
    writeln!(writer, r###"// Code generated by build.rs; DO NOT EDIT.
"###)?;
    let subcommand_files_pattern = Path::new("src").join("subcmd_*.rs");
    let entries = glob(&subcommand_files_pattern.to_string_lossy()).unwrap();
    let mut module_names: Vec<String> = dbg!(dbg!(entries
        .filter_map(|entry| {
            entry.ok().and_then(|path| {
                path.file_stem().map(|file_stem| file_stem.to_string_lossy().to_string())
            })
        })
        .collect()));
    module_names.sort_by(|a, b| a.cmp(b));
    for module_name in &module_names.clone() {
        writeln!(writer, "mod {module};", module = module_name)?;
    }
    writeln!(writer, r###"
fn register_subcommands(main_command: &mut App) {{"###)?;
    for module_name in &module_names {
        // writeln!(writer, "    {module}::register(main_command);", module = module_name)?;
        writeln!(writer, "    main_command.register_subcommand({module}::meta(), Box::new({module}::handler));", module = module_name)?;
    }
    writeln!(writer, r###"}}"###)?;
    Ok(())
}

