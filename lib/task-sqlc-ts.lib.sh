#!/bin/sh
test "${guard_7bad9f3+set}" = set && return 0; guard_7bad9f3=-

. ./task.sh
. ./task-sqlc.lib.sh

task_sqlc__ts__build() { # Builds the gen-typescript plugin.
  first_call 121be92 || return 0
  # Currently, the published WASM on sqlc.dev does not support SQLite3.
  if test -r build/sqlc-gen-typescript/examples/plugin.wasm
  then
    return 0
  fi
  cd build
  if ! test -d sqlc-gen-typescript
  then
    cross_run git clone https://github.com/sqlc-dev/sqlc-gen-typescript.git
  fi
  cd sqlc-gen-typescript
  cp -f ../../task.sh ../../task-*.lib.sh .
  sh task.sh npm:depinstall
  # https://github.com/sqlc-dev/sqlc-gen-typescript/blob/main/.github/workflows/ci.yml
  sh task.sh npx tsc --noEmit
  sh task.sh npx esbuild --bundle src/app.ts --tree-shaking=true --format=esm --target=es2020 --outfile=out.js
  sh task.sh javy build out.js -o examples/plugin.wasm
}

# Rewrite the TypeScript code generated by sqlc.
rewrite_sqlcgen_ts() {
  local temp_path
  temp_path="$(get_temp_dir_path)"/rewrite_sqlcgen_typescript
  local file_path
  for file_path in "$@"
  do
    sed -E \
      -e "s/^([[:blank:]]*[_[:alnum:]]+)(: .* \| null;)$/rewrite_null_def${us}\1${us}\2${us}/" -e t \
      -e "s/^(.*\.${lwb}bind\()([^)]*)(\).*)$/rewrite_bind${us}\1${us}\2${us}\3${us}/" -e t \
      -e "s/^(.*)$/nop${us}\1${us}/" <"$file_path" \
    | while IFS= read -r line
    do
      IFS="$us"
      # shellcheck disable=SC2086
      set -- $line
      unset IFS
      op="$1"
      shift
      case "$op" in
        (rewrite_null_def)
          echo "$1?$2"
          ;;
        (rewrite_bind)
          echo "$1$(echo "$2, " | sed -E -e 's/([^,]+), */typeof \1 === "undefined"? null: \1, /g' -e 's/, $//')$3"
          ;;
        (nop)
          echo "$1"
          ;;
        (*)
          echo Unhandled operation: "$op" >&2
          exit 1
          ;;
      esac
    done >"$temp_path"
    mv "$temp_path" "$file_path"
  done
}
