# The Manifest Format - The Cargo Book https://doc.rust-lang.org/cargo/reference/manifest.html

[package]
name = "rsmain"
version = "0.1.0"
edition = "2021"
# Releases · rust-lang/rust https://github.com/rust-lang/rust/releases
# rust-version = "1.80.1"
build = "build.rs"

[build-dependencies]
glob = "~0.3.1"
# wasm-bindgen-test = "0.3.34"

# バージョン指定において、semantic に patch は上げて良いなら `~` で指定する
[dependencies]
# list_files_macro = "^0.1.0"
clap = { version = "~4.5.1", features = ["derive"] }
regex = "~0.1"
# “This library provides anyhow::Error, a trait object based error type for easy idiomatic error handling in Rust applications.” // anyhow - Rust https://docs.rs/anyhow/latest/anyhow/
anyhow = { version = "~1.0.66", features = ["backtrace"] }
subcommand = "~0.1.2"
rustc_version = "0.4.1"
rustc_version_runtime = "0.3.0"
# once_cell - Rust https://docs.rs/once_cell/latest/once_cell/
once_cell = "~1.20.1"
# ctor - crates.io: Rust Package Registry https://crates.io/crates/ctor
# ctor = "~0.2.8"
termcolor = "~1.1.3"
atty = "~0.2.14"
# wasm-bindgen = "0.2.84"
# The `console_error_panic_hook` crate provides better debugging of panics by
# logging them with `console.error`. This is great for development, but requires
# all the `std::fmt` and `std::panicking` infrastructure, so isn't great for
# code size when deploying.
console_error_panic_hook = { version = "0.1.7", optional = true }

# cargo-run-bin - crates.io: Rust Package Registry https://crates.io/crates/cargo-run-bin
[package.metadata.bin]
# wasm-pack - crates.io: Rust Package Registry https://crates.io/crates/wasm-pack
# wasm-pack = { version = "~0.13.0" }

[[bin]]
name = "rsmain"
path = "src/main.rs"

# [lib]
# crate-type = ["cdylib", "rlib"]

[features]
default = ["console_error_panic_hook"]

[profile.release]
# Tell `rustc` to optimize for small code size.
opt-level = "s"
